//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApp.SvcTickets {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SvcTickets.IServicioTickets")]
    public interface IServicioTickets {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioTickets/BuscarUnoTicketServicio", ReplyAction="http://tempuri.org/IServicioTickets/BuscarUnoTicketServicioResponse")]
        Juegos.Negocio.Modelo.Ticket BuscarUnoTicketServicio(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioTickets/BuscarUnoTicketServicio", ReplyAction="http://tempuri.org/IServicioTickets/BuscarUnoTicketServicioResponse")]
        System.Threading.Tasks.Task<Juegos.Negocio.Modelo.Ticket> BuscarUnoTicketServicioAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioTickets/CrearTicketServicio", ReplyAction="http://tempuri.org/IServicioTickets/CrearTicketServicioResponse")]
        bool CrearTicketServicio(int id, int valor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioTickets/CrearTicketServicio", ReplyAction="http://tempuri.org/IServicioTickets/CrearTicketServicioResponse")]
        System.Threading.Tasks.Task<bool> CrearTicketServicioAsync(int id, int valor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioTickets/DeleteTicketServicio", ReplyAction="http://tempuri.org/IServicioTickets/DeleteTicketServicioResponse")]
        bool DeleteTicketServicio(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioTickets/DeleteTicketServicio", ReplyAction="http://tempuri.org/IServicioTickets/DeleteTicketServicioResponse")]
        System.Threading.Tasks.Task<bool> DeleteTicketServicioAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioTickets/UpdateTicketServicio", ReplyAction="http://tempuri.org/IServicioTickets/UpdateTicketServicioResponse")]
        bool UpdateTicketServicio(int id, int valor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioTickets/UpdateTicketServicio", ReplyAction="http://tempuri.org/IServicioTickets/UpdateTicketServicioResponse")]
        System.Threading.Tasks.Task<bool> UpdateTicketServicioAsync(int id, int valor);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServicioTicketsChannel : WebApp.SvcTickets.IServicioTickets, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServicioTicketsClient : System.ServiceModel.ClientBase<WebApp.SvcTickets.IServicioTickets>, WebApp.SvcTickets.IServicioTickets {
        
        public ServicioTicketsClient() {
        }
        
        public ServicioTicketsClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServicioTicketsClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServicioTicketsClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServicioTicketsClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Juegos.Negocio.Modelo.Ticket BuscarUnoTicketServicio(int id) {
            return base.Channel.BuscarUnoTicketServicio(id);
        }
        
        public System.Threading.Tasks.Task<Juegos.Negocio.Modelo.Ticket> BuscarUnoTicketServicioAsync(int id) {
            return base.Channel.BuscarUnoTicketServicioAsync(id);
        }
        
        public bool CrearTicketServicio(int id, int valor) {
            return base.Channel.CrearTicketServicio(id, valor);
        }
        
        public System.Threading.Tasks.Task<bool> CrearTicketServicioAsync(int id, int valor) {
            return base.Channel.CrearTicketServicioAsync(id, valor);
        }
        
        public bool DeleteTicketServicio(int id) {
            return base.Channel.DeleteTicketServicio(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteTicketServicioAsync(int id) {
            return base.Channel.DeleteTicketServicioAsync(id);
        }
        
        public bool UpdateTicketServicio(int id, int valor) {
            return base.Channel.UpdateTicketServicio(id, valor);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateTicketServicioAsync(int id, int valor) {
            return base.Channel.UpdateTicketServicioAsync(id, valor);
        }
    }
}
